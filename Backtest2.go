package main

import (//"github.com/gin-gonic/gin"
		"strings"
		"net/http"
		"fmt"
    "html/template"
    "log"
		"io/ioutil"
		)

func ShareData(v string)string {
  
  // Generated by curl-to-Go: https://mholt.github.io/curl-to-go

  body := strings.NewReader(v)
  req, err := http.NewRequest("POST", "http://pooya1991.ocpu.io/BillioR/R/ShareData/json", body)
  if err != nil {
    // handle err
  }
  req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

  resp, err := http.DefaultClient.Do(req)
  if err != nil {
    // handle err
  }
  defer resp.Body.Close()

  bo, err := ioutil.ReadAll(resp.Body)
  bString := string(bo)
  return bString
}

func Stg(v string)string {
  
// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
  body := strings.NewReader(v)
  req, err := http.NewRequest("POST", "http://pooya1991.ocpu.io/BillioR/R/PranaBacktest/json", body)
  if err != nil {
    // handle err
  }
  req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

  resp, err := http.DefaultClient.Do(req)
  if err != nil {
    // handle err
  }
  defer resp.Body.Close()

  bo, err := ioutil.ReadAll(resp.Body)
  bString := string(bo)
  return bString
  //return v
}

func GetVSD(w http.ResponseWriter, r *http.Request) {
    r.ParseForm()
    vals := make(map[string]string)
    for k, v := range r.Form {
      vals[k] = strings.Join(v, "")
    }
    sd := fmt.Sprintf("%s%s%s%s%s%s%s%s%s",`share='`,vals["share"],`'&timeframe='`,vals["Timeframe"],`'&sdate='`,vals["StartDate"],`'&edate='`,vals["EndDate"],`'`)
    ss := ShareData(sd)
    st := fmt.Sprintf("%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s",`Stg='`,vals["Stg"],`'&Share='`,ss,`'&Timeframe='`,vals["Timeframe"],`'&StartDate='`,vals["StartDate"],`'&EndDate='`,vals["EndDate"],`'&Vol=`,vals["Vol"],`&Over=`,vals["Over"],`&Fee=`,vals["Fee"],`&ReEnterType='`,vals["ReEnterType"],`'&ReEnterAmm=`,vals["ReEnterAmm"])
    b := Stg(st)
    //fmt.Fprintf(w, vals["Stg"]) // write data to response
    fmt.Fprintf(w, b)
}

func Backtest(w http.ResponseWriter, r *http.Request) {
    if r.Method == "GET" {
        t, _ := template.ParseFiles("Backtest.html")
        t.Execute(w, nil)
    } else {
        r.ParseForm()
        fmt.Println("Stg:", r.Form["Stg"])
        fmt.Println("UID:", r.Form["UID"])
        fmt.Println("share:", r.Form["share"])
        fmt.Println("Timeframe:", r.Form["Timeframe"])
        fmt.Println("StartDate:", r.Form["StartDate"])
        fmt.Println("EndDate:", r.Form["EndDate"])
        fmt.Println("Vol:", r.Form["Vol"])
        fmt.Println("Fee:", r.Form["Fee"])
        fmt.Println("Over:", r.Form["Over"])
        fmt.Println("ReEnterType:", r.Form["ReEnterType"])
        fmt.Println("ReEnterAmm:", r.Form["ReEnterAmm"])
    }
}

func main() {
    http.HandleFunc("/", GetVSD) // setting router rule
    http.HandleFunc("/Backtest", Backtest)
    err := http.ListenAndServe(":8080", nil) // setting listening port
    if err != nil {
        log.Fatal("ListenAndServe: ", err)
    }
}

/*func main() {

  r := gin.Default()
  r.GET("/", GetVSD) // setting router rule
  r.GET("/Backtest", gin.WrapF(Backtest))
  r.Run(":8080")
}*/